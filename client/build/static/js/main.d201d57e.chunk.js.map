{"version":3,"sources":["reportWebVitals.js","context/auth.js","util/AuthRoute.js","components/MenuBar.js","util/Tooltip.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","components/Footer.js","components/Logo.js","App.js","ApolloProvider.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","pathName","window","location","pathname","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","floated","size","color","Item","username","active","as","Link","position","style","onClick","className","Tooltip","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","result","data","readQuery","query","posts","getPosts","writeQuery","onError","err","deletePostOrComment","margin","Confirm","open","onCancel","onConfirm","PostCard","string","body","createdAt","commentCount","Card","fluid","Content","Header","charAt","toUpperCase","slice","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","error","Form","fontFamily","textAlign","Field","Input","graphQLErrors","extensions","errors","Home","useQuery","loading","Grid","columns","Row","width","Column","Transition","Group","map","marginBottom","LOGIN_USER","Login","context","setErrors","loginUser","password","_","history","push","exception","noValidate","placeholder","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","match","params","comment","setComment","submitComment","getPost","comments","disabled","trim","userComment","Footer","getCurrentDate","separator","newDate","date","getDate","month","getMonth","year","getFullYear","Logo","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d201d57e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useReducer, createContext } from 'react';\nimport jwtDecode from 'jwt-decode';\n\nconst initialState = {\n  user: null,\n};\n\nif (localStorage.getItem('jwtToken')) {\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('jwtToken');\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = createContext({\n  user: null,\n  login: (userData) => {},\n  logout: () => {},\n});\n\n// TODO: Learn more about reducers\n// A reducer basically receives an action with a type and a payload, then determines what to do based on the functionality\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    // persist the logged in state by storing the token on the user's device\n    localStorage.setItem('jwtToken', userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData,\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem('jwtToken');\n    dispatch({ type: 'LOGOUT' });\n  }\n\n  return <AuthContext.Provider value={{ user: state.user, login, logout }} {...props} />;\n}\n\nexport { AuthContext, AuthProvider };\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\n\nfunction AuthRoute({ component: Component, ...rest }) {\n  const { user } = useContext(AuthContext);\n\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => (user ? <Redirect to=\"/\" /> : <Component {...props} />)}\n    />\n  )\n}\n\nexport default AuthRoute;\n","import React, { useContext, useState } from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction MenuBar() {\n  const { user, logout } = useContext(AuthContext);\n  // dynamically set the 'active' link by looking at the current URL\n  const pathName = window.location.pathname;\n  const path = pathName === '/' ? 'home' : pathName.substr(1);\n  const [activeItem, setActiveItem] = useState(path);\n\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n\n  const menuBar = user ? (\n    <Menu pointing secondary floated=\"right\" size=\"massive\" color=\"teal\">\n      <Menu.Item name={user.username} active as={Link} to=\"/\" />\n      <Menu.Menu position=\"right\">\n        <Menu.Item style={{color: \"white\"}} name=\"logout\" onClick={logout} as={Link} to=\"/\" />\n      </Menu.Menu>\n    </Menu>\n  ) : (\n    <Menu pointing secondary floated=\"right\"  size=\"massive\" color=\"teal\">\n      <Menu.Item className=\"\" name=\"home\" active={activeItem === 'home'} onClick={handleItemClick} as={Link} to=\"/\" />\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"login\" active={activeItem === 'login'} onClick={handleItemClick} as={Link} to=\"/login\" />\n        <Menu.Item \n          name=\"register\"\n          active={activeItem === 'register'}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/register\"\n        />\n      </Menu.Menu>\n    </Menu>\n  );\n\n  return menuBar;\n}\n\nexport default MenuBar;\n","import { Popup } from 'semantic-ui-react';\nimport React from 'react';\n\nfunction Tooltip({ content, children }) {\n  return <Popup inverted content={content} trigger={children} />;\n}\n\nexport default Tooltip;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation, gql } from '@apollo/client';\nimport { Button, Icon, Label } from 'semantic-ui-react';\nimport Tooltip from '../util/Tooltip';\n\n// eslint-disable-next-line react/prop-types\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\n  const [liked, setLiked] = useState(false);\n\n  useEffect(() => {\n    // eslint-disable-next-line react/prop-types\n    if (user && likes.find((like) => like.username === user.username)) {\n      setLiked(true);\n    } else {\n      setLiked(false);\n    }\n  }, [user, likes]);\n\n  // eslint-disable-next-line no-use-before-define\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\n    variables: { postId: id },\n  });\n\n  // eslint-disable-next-line no-nested-ternary\n  const likeButton = user ? (\n    liked ? (\n      <Button color=\"teal\">\n        <Icon name=\"heart\" />\n      </Button>\n    ) : (\n      <Button color=\"teal\" basic>\n        <Icon name=\"heart\" />\n      </Button>\n    )\n  ) : (\n    <Button as={Link} to={\"/login\"} color=\"teal\" basic>\n      <Icon name=\"heart\" />\n    </Button>\n  );\n  return user ? (\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n      <Tooltip content={liked ? 'Unlike' : 'Like'}>{likeButton}</Tooltip>\n      <Label basic color=\"teal\" pointing=\"left\">\n        {likeCount}\n      </Label>\n    </Button>\n  ) : (\n    <Button as=\"div\" labelPosition=\"right\">\n    <Tooltip content={liked ? \"Unlike\" : \"Like\"}>{likeButton}</Tooltip>\n    <Label basic color=\"blue\" pointing=\"left\">\n        {likeCount}\n    </Label>\n</Button>\n  )\n}\n\nconst LIKE_POST_MUTATION = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      id\n      likes {\n        id\n        username\n      }\n      likeCount\n    }\n  }\n`;\n\nexport default LikeButton;\n","import { gql } from '@apollo/client';\n\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n      commentCount\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { Button, Icon, Confirm } from \"semantic-ui-react\";\n\nimport Tooltip from '../util/Tooltip';\n\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction DeleteButton({ postId, commentId, callback }) {\n    const [confirmOpen, setConfirmOpen] = useState(false);\n  \n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n  \n    const [deletePostOrComment] = useMutation(mutation, {\n      update(proxy, result) {\n        setConfirmOpen(false);\n  \n        if (!commentId) {\n          // removing the post from the client-side cache\n          const data = proxy.readQuery({\n            query: FETCH_POSTS_QUERY,\n          });\n          // render all the posts minus the one we just deleted\n          const posts = [result.data, ...data.getPosts];\n          proxy.writeQuery({ query: FETCH_POSTS_QUERY, data: { getPosts: posts } });\n        }\n  \n        // if it is passed, call the callback (i.e. defined in SinglePost to redirect the user to the homepage)\n        if (callback) callback();\n      },\n      variables: {\n        postId,\n        commentId,\n      },\n      onError(err) {\n        return err;\n      },\n    });\n    return (\n        <>\n          <Tooltip content={commentId ? 'Delete this comment' : 'Delete this post'}>\n            <Button as=\"div\" color=\"red\" floated=\"right\" onClick={() => setConfirmOpen(true)}>\n              <Icon name=\"trash\" style={{ margin: 0 }} />\n            </Button>\n          </Tooltip>\n          <Confirm open={confirmOpen} onCancel={() => setConfirmOpen(false)} onConfirm={deletePostOrComment} />\n        </>\n      );\n    }\n\n    const DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\n    deleteComment(postId: $postId, commentId: $commentId) {\n      id\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default DeleteButton;\n","import React, { useContext } from 'react';\nimport { Card, Icon, Label, Image, Button } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from \"./LikeButton\";\nimport DeleteButton from './DeleteButton';\nimport Tooltip from '../util/Tooltip';\n\nfunction PostCard({ post: { body, createdAt, id, username, likeCount, commentCount, likes } }) { // removed likeCount and likes\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Card className=\"post-card\" fluid>\n      <Card.Content>\n        <Card.Header>{capitalizeFirstLetter(username)}</Card.Header>\n        <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n        <Card.Description>{body}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\n        <Tooltip content=\"comment on this post\">\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n            <Button color=\"blue\" basic>\n              <Icon name=\"comments\" />\n            </Button>\n            <Label basic color=\"blue\" pointing=\"left\">\n              {commentCount}\n            </Label>\n          </Button>\n        </Tooltip>\n        {user && user.username === username && (<DeleteButton postId={id} />)}\n      </Card.Content>\n    </Card>\n  );\n}\n\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport default PostCard;\n","import { useState } from 'react';\n\nexport const useForm = (callback, initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const onChange = (e) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    callback();\n  };\n\n  return {\n    onChange,\n    onSubmit,\n    values,\n  };\n};\n","/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\n// import gql from 'graphql-tag';\nimport { gql, useMutation } from '@apollo/client';\n\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction PostForm() {\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\n    body: '',\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY,\n      });\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data: {\n          getPosts: [result.data.createPost, ...data.getPosts],\n        },\n      });\n      values.body = '';\n    },\n    onError(err) {\n      return err;\n    },\n  });\n\n  function createPostCallback() {\n    createPost();\n  }\n\n  return (\n    <>\n      <Form onSubmit={onSubmit}>\n        <h2 style={{color: \"#EBEAE2\", fontFamily: \"cursive\", textAlign: \"center\"}}>What is on your mind</h2>\n        <Form.Field>\n          <Form.Input name=\"body\" onChange={onChange} value={values.body} error={!!error} />\n          <Button className=\"btn-submit\" type=\"submit\" color=\"purple\">\n            Submit\n          </Button>\n        </Form.Field>\n      </Form>\n      {error && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            <li>{error.graphQLErrors[0].extensions.errors.post}</li>\n          </ul>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst CREATE_POST_MUTATION = gql`\n    mutation createPost($body: String!) {\n        createPost(body: $body) {\n            id\n            body\n            createdAt\n            username\n            likeCount\n            likes {\n                id\n                username\n                createdAt\n            }\n            commentCount\n            comments {\n                id\n                body\n                username\n                createdAt\n            }\n        }\n    }\n`;\n\nexport default PostForm;\n","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { Grid, Transition} from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\n\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport \"./Home.css\"\n\nfunction Home() {\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY);\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Grid columns={3}>\n      <Grid.Row className=\"page-title\" style={{width:\"100%\"}}>\n      </Grid.Row>\n      <Grid.Row>\n        {user && (\n          <Grid.Column>\n            <PostForm />\n          </Grid.Column>\n        )}\n        {loading ? (\n          <h1>Loading posts...</h1>\n        ) : (\n          <Transition.Group>\n            {data.getPosts &&\n              data.getPosts.map((post) => (\n                <Grid.Column key={post.id} style={{marginBottom: 40 }}>\n                  <PostCard post={post} />\n                </Grid.Column>\n              ))}\n          </Transition.Group>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Home;\n","import { useMutation, gql } from '@apollo/client';\nimport React, { useContext, useState } from 'react';\nimport { Button, Form, Image, Header } from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\n\nfunction Login(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n    username: '',\n    password: '',\n  });\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    // success\n    update(_, { data: { login: userData } }) {\n      context.login(userData);\n      props.history.push('/');\n    },\n    // failure\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values,\n  });\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n        <div className=\"space\"></div>\n    <Header as='h2' color='purple' textAlign='center'>\n        Log-in to your account\n    </Header>\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n        <Form.Input\n          type=\"text\"\n          placeholder=\"Username...\"\n          name=\"username\"\n          size=\"big\"\n          value={values.username}\n          error={!!errors.username}\n          onChange={onChange}\n        />\n        <Form.Input\n          type=\"password\"\n          placeholder=\"Password...\"\n          name=\"password\"\n          size=\"big\"\n          value={values.password}\n          error={!!errors.password}\n          onChange={onChange}\n        />\n        <Button style={{width: \"100%\"}} type=\"submit\" color=\"purple\" size=\"big\">\n          Login\n        </Button>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Login;\n","import { useMutation, gql } from '@apollo/client';\nimport React, { useContext, useState } from 'react';\nimport { Button, Form, Header } from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\nfunction Register(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(registerUser, {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    // success\n    update(_, { data: { register: userData } }) {\n      context.login(userData);\n      props.history.push('/');\n    },\n    // failure\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values,\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n    <div className=\"space\"></div>\n    <Header as='h2' color='purple' textAlign='center'>\n        Resister your account\n    </Header>\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n        \n        <Form.Input\n          type=\"text\"\n          placeholder=\"Username...\"\n          name=\"username\"\n          size=\"big\"\n          value={values.username}\n          error={!!errors.username}\n          onChange={onChange}\n        />\n        <Form.Input\n          type=\"email\"\n          placeholder=\"Email...\"\n          name=\"email\"\n          size=\"big\"\n          value={values.email}\n          error={!!errors.email}\n          onChange={onChange}\n        />\n        <Form.Input\n          type=\"password\"\n          placeholder=\"Password...\"\n          name=\"password\"\n          size=\"big\"\n          value={values.password}\n          error={!!errors.password}\n          onChange={onChange}\n        />\n        <Form.Input\n          type=\"password\"\n          placeholder=\"Confirm Password...\"\n          name=\"confirmPassword\"\n          size=\"big\"\n          value={values.confirmPassword}\n          error={!!errors.confirmPassword}\n          onChange={onChange}\n        />\n        <Button style={{width: \"100%\"}} type=\"submit\" color=\"purple\" size=\"big\">\n          Register\n        </Button>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst REGISTER_USER = gql`\n  mutation register($username: String!, $email: String!, $password: String!, $confirmPassword: String!) {\n    register(\n      registerInput: { username: $username, email: $email, password: $password, confirmPassword: $confirmPassword }\n    ) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Register;\n","import React, { useContext, useState } from 'react';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport { Button, Card, Form, Grid, Icon, Label } from 'semantic-ui-react';\nimport moment from 'moment';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport Tooltip from '../util/Tooltip';\nimport { Link } from 'react-router-dom';\n\nfunction SinglePost(props) {\n  const { postId } = props.match.params;\n  const { user } = useContext(AuthContext);\n\n\n  const [comment, setComment] = useState('');\n\n  const { loading, data } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId,\n    },\n  });\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n    //   commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment,\n    },\n  });\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let postMarkup;\n  if (loading) {\n    postMarkup = <p>Loading post...</p>;\n  } else {\n    const { id, body, createdAt, username, likes, comments, likeCount, commentCount } = data.getPost;\n\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={2}>\n          </Grid.Column>\n          <Grid.Column width={10}>\n            <Card className=\"single-card\" fluid>\n              <Card.Content>\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <hr />\n              <Card.Content extra>\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\n                <Tooltip content=\"Comment on this post\">\n                  <Button as={Link} labelPosition=\"right\" to={\"/Login\"}>\n                    <Button basic color=\"blue\">\n                      <Icon name=\"comments\" />\n                    </Button>\n                    <Label basic color=\"blue\" pointing=\"left\">\n                      {commentCount}\n                    </Label>\n                  </Button>\n                </Tooltip>\n                {user && user.username === username && (<DeleteButton postId={id} callback={deletePostCallback} />)}\n              </Card.Content>\n            </Card>\n            {user && (\n              <Card fluid>\n                <Card.Content>\n                  <p>Post a Comment</p>\n                  <Form>\n                    <div className=\"ui action input fluid\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Comment...\"\n                        name=\"comment\"\n                        value={comment}\n                        onChange={(e) => setComment(e.target.value)}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"ui button teal\"\n                        disabled={comment.trim('') === ''}\n                        onClick={submitComment}\n                      >\n                        Submit\n                      </button>\n                    </div>\n                  </Form>\n                </Card.Content>\n              </Card>\n            )}\n            {comments.map((userComment) => (\n              <Card fluid key={userComment.id}>\n                <Card.Content>\n                  {user && user.username === userComment.username && (\n                    <DeleteButton postId={id} commentId={userComment.id} />\n                  )}\n                  <Card.Header>{userComment.username}</Card.Header>\n                  <Card.Meta>{moment(userComment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{userComment.body}</Card.Description>\n                </Card.Content>\n              </Card>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n  return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: ID!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n","import React from\"react\";\n\nexport default function Footer() {\n\n    return (\n        <div>\n            <p style={{textAlign: \"center\", color: \"#AC9FC4\"}}>Andrew Q {getCurrentDate('-')} &hearts; &copy;</p>\n        </div>\n    )\n}\n\nfunction getCurrentDate(separator=''){\n\n    let newDate = new Date()\n    let date = newDate.getDate();\n    let month = newDate.getMonth() + 1;\n    let year = newDate.getFullYear();\n    \n    return `${year}${separator}${month<10?`0${month}`:`${month}`}${separator}${date}`\n    }\n","import React from \"react\";\n\n\nexport default function Logo() {\n\n    return (\n\n        <div className=\"ui small image\">\n        </div>\n    )\n}","import { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\n\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './util/AuthRoute';\n\nimport MenuBar from './components/MenuBar';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport SinglePost from './pages/SinglePost';\n\nimport Footer from \"./components/Footer\"\nimport Logo from \"./components/Logo\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container className=\"container\">\n            <Logo />\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n      <Footer className=\"footer\" /> \n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport App from './App';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:8008/graphql',\n});\n\n// kind of a middleware to add authorization headers to API calls\nconst authLink = setContext(() => {\n  const token = localStorage.getItem('jwtToken');\n  return {\n    headers: {\n      Authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nexport default (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n","import ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}